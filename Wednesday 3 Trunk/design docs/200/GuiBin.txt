//=========================TylerGregg=========================

public class GuiBin extends Holdable{ //empty box
    int currX;
    int currY;
    int destX;
    int destY;
        
    private BinAgent agent = null;
    Stack<Holdable> objectStack = new Stack<Holdable>(); //box can contain objects
        
    public GuiBox(BinAgent agent){
      	this.agent = agent;
	}
	
	public void draw(Graphics g){
		//draw the box in the correct location
	}
	
	public void fillBin(Holdable newCandy){
		//add to the stack
		objectStack.push(newCandy);
	}
}
//==========================================================

//v1/v2

/**
 * @author Tyler Gregg
 * The GuiBin serves as the container for the 
 * GuiCandy before it is unloaded from the
 * GuiFeeder onto the GuiDiverter.
 */
package gui.holdable;

public class GuiBin extends Holdable {
    //Stack<Holdable> objectStack = new Stack<Holdable>(); //box can contain objects
    private int width;
    private int height;
    private boolean isOn;
    
    public GuiBin(int locX, int locY){
    	super(locX, locY);
 		//set image, initialize booleans and width/height
	}
	
	public void draw(Graphics g){
		//draw the box in the correct location
		//extract the bin image from the imageicon
		super.draw(g);
	}
	public void updateLocation(){
		if(isOn){
			super.updateLocation();
		}
	}

	public int getWidth(){
		return width;
	}
	public int getHeight(){
		return height;
	}

	public void partCallback(Gui part) {
		// do nothing
	}
	
	public int getCurrentX() {
		return currX;
	}

	public int getCurrentY() {
		return currY;
	}

	public int getDestinationX() {
		return destX;
	}

	public int getDestinationY() {
		return destY;
	}

	public void enable(){
		isOn = true;
	}
	public void disable(){
		isOn = false;
	}
	public Power checkPower(){
		//return on if on, off if off
	}
}
//==========================================================